{"version":3,"sources":["components/Header/index.js","components/Title/index.js","components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Title","Card","state","count","clickCount","setState","console","log","props","alert","onClick","this","src","image","alt","name","React","Component","Wrapper","children","App","friends","map","friend","key","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"owEA4BeA,MAzBf,WACI,OAGI,gCAEI,yBAAKC,UAAU,+BAEX,yBAAKA,UAAU,gCAEX,4BACI,4BACI,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,sBAEJ,wDACA,6D,MCFTC,MAbf,WACI,OAGJ,yBAAKF,UAAU,6BACb,yBAAKA,UAAU,aACb,iDACA,uBAAGA,UAAU,YCoBFG,G,iNAzBXC,MAAQ,CACJC,MAAO,G,EAIXC,WAAa,WACT,EAAKC,SAAS,CAAEF,MAAO,EAAKD,MAAMC,MAAQ,IAG1CG,QAAQC,IAAI,EAAKC,OACjBC,MAAM,iB,wEAIN,OAEI,yBAAMX,UAAU,sBAAsBY,QAASC,KAAKP,YAChD,yBAAKN,UAAU,gCACX,yBAAKA,UAAU,kBAAkBc,IAAKD,KAAKH,MAAMK,MAAOC,IAAKH,KAAKH,MAAMO,a,GApBzEC,IAAMC,Y,MCUVC,MAVf,SAAiBV,GACb,OACI,yBAAKV,UAAU,aACX,yBAAKA,UAAU,oBACVU,EAAMW,Y,OCuBRC,E,iLAnBX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGnB,EACAoB,EAAQC,KAAI,SAACC,GACZ,OAAO,kBAAC,EAAD,CAAMR,KAAMQ,EAAOR,KAAMF,MAAOU,EAAOV,MAAOW,IAAKD,EAAOE,SAMrE,kBAAC,EAAD,W,GAhBUT,IAAMC,WCIJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6d0a19b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n\r\n\r\n        <header>\r\n\r\n            <div className=\"fixed-top background-header\">\r\n\r\n                <div className=\"container-fluid score-holder\">\r\n\r\n                    <ul>\r\n                        <li>\r\n                            <a className=\"nav-link\" href=\"/\">Memory Click Game</a>\r\n                        </li>\r\n                        <li>Click an image to begin!</li>\r\n                        <li>Score: 0 | High Score: 0</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title() {\r\n    return (\r\n\r\n\r\n<div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container\">\r\n    <h2>Memory Click Game</h2>\r\n    <p className=\"lead\"></p>\r\n  </div>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nclass Card extends React.Component {\r\n    //Is it better to use a boolean here?\r\n    state = {\r\n        count: 0\r\n    };\r\n\r\n    //Should this function be defined on the app.js page?\r\n    clickCount = () => {\r\n        this.setState({ count: this.state.count + 1 });\r\n        // How to access the friends array to do sort method?\r\n        //This.props refers to the properties of the clicked item\r\n        console.log(this.props);\r\n        alert(\"Card clicked\")\r\n    };\r\n\r\n    render() {\r\n        return (\r\n\r\n            < div className=\"card character-card\" onClick={this.clickCount}>\r\n                <div className=\"view card-background overlay\">\r\n                    <img className=\"character-image\" src={this.props.image} alt={this.props.name} />\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"main-content row\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Title from \"./components/Title\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./friends.json\"\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Title />\n        <Wrapper>\n          {Card}\n          {friends.map((friend) => {\n            return <Card name={friend.name} image={friend.image} key={friend.id} />\n          })\n          }\n\n        </Wrapper>\n\n        <Header />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}