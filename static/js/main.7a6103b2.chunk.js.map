{"version":3,"sources":["components/Header/index.js","components/Title/index.js","components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","score","highscore","Title","Card","onClick","clickCount","id","src","image","alt","name","Wrapper","children","App","state","friends","winGame","alert","setState","loseGame","find","data","index","count","shuffleArray","gameScore","array","i","length","j","Math","floor","random","temp","console","log","this","forEach","card","map","friend","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wvEAmBeA,G,YAhBA,SAAAC,GAAK,OAChB,gCACI,yBAAKC,UAAU,+BACX,yBAAKA,UAAU,gCACX,4BACI,4BACI,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,sBAEJ,wDACA,sCAAYF,EAAMG,MAAlB,kBAAwCH,EAAMI,iB,MCInDC,MAbf,WACI,OAGJ,yBAAKJ,UAAU,6BACb,yBAAKA,UAAU,aACb,iDACA,uBAAGA,UAAU,Y,MCMFK,MAbf,SAAcN,GAEV,OAEI,yBAAMC,UAAU,sBAAsBM,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMS,MACxE,yBAAKR,UAAU,gCACX,yBAAKA,UAAU,kBAAkBS,IAAKV,EAAMW,MAAOC,IAAKZ,EAAMa,U,MCI/DC,MAVf,SAAiBd,GACb,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,oBACVD,EAAMe,Y,OC4ERC,E,2MA1EbC,MAAQ,CACNC,UACAf,MAAO,EACPC,UAAW,G,EAGbe,QAAU,WACRC,MAAM,sCACN,EAAKC,SAAS,CAAElB,MAAO,K,EAGzBmB,SAAW,WACTF,MAAM,qCACN,EAAKC,SAAS,CAAElB,MAAO,K,EAGzBK,WAAa,SAAAC,GACX,EAAKQ,MAAMC,QAAQK,MAAK,SAACC,EAAMC,GAC7B,GAAID,EAAKf,KAAOA,EAAI,CAClB,GAA6B,IAAzBS,EAAQO,GAAOC,MAIjB,OAHAR,EAAQO,GAAOC,MAAQR,EAAQO,GAAOC,MAAQ,EAC9C,EAAKL,SAAS,CAAElB,MAAO,EAAKc,MAAMd,MAAQ,IAC1C,EAAKwB,aAAaT,IACX,EAEP,EAAKU,iB,EAMbD,aAAe,SAAAE,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,I,EAIfR,UAAY,WACN,EAAKX,MAAMd,MAAQ,EAAKc,MAAMb,WAChC,EAAKiB,SAAS,CAAEjB,UAAW,EAAKa,MAAMd,QAAS,WAC7CkC,QAAQC,IAAIC,KAAKtB,MAAMb,cAG3B,EAAKa,MAAMC,QAAQsB,SAAQ,SAAAC,GACzBA,EAAKf,MAAQ,KAEf,EAAKJ,WACoB,KAArB,EAAKL,MAAMd,QACb,EAAKkB,SAAS,CAAEjB,UAAW,EAAKa,MAAMd,QACtC,EAAKgB,Y,wEAKC,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQhB,MAAOoC,KAAKtB,MAAMd,MAAOC,UAAWmC,KAAKtB,MAAMb,YACvD,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGE,EACAY,EAAQwB,KAAI,SAACC,GACZ,OAAO,kBAAC,EAAD,CAAMnC,WAAY,EAAKA,WAAYK,KAAM8B,EAAO9B,KAAMF,MAAOgC,EAAOhC,MAAOiC,IAAKD,EAAOlC,GAAIA,GAAIkC,EAAOlC,c,GAlEvGoC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7a6103b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = props => (\r\n    <header>\r\n        <div className=\"fixed-top background-header\">\r\n            <div className=\"container-fluid score-holder\">\r\n                <ul>\r\n                    <li>\r\n                        <a className=\"nav-link\" href=\"/\">Memory Click Game</a>\r\n                    </li>\r\n                    <li>Click an image to begin!</li>\r\n                    <li>Score: {props.score} | High Score: {props.highscore}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title() {\r\n    return (\r\n\r\n\r\n<div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container\">\r\n    <h2>Memory Click Game</h2>\r\n    <p className=\"lead\"></p>\r\n  </div>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n\r\n    return (\r\n\r\n        < div className=\"card character-card\" onClick={() => props.clickCount(props.id)}>\r\n            <div className=\"view card-background overlay\">\r\n                <img className=\"character-image\" src={props.image} alt={props.name} />\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"main-content row\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Title from \"./components/Title\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./friends.json\";\n\nclass App extends React.Component {\n  state = {\n    friends,\n    score: 0,\n    highscore: 0\n  };\n\n  winGame = () => {\n    alert(\"Congratulations! You won the game!\");\n    this.setState({ score: 0 });\n  };\n\n  loseGame = () => {\n    alert(\"Sorry, You Lost! Please try again\");\n    this.setState({ score: 0 });\n  };\n\n  clickCount = id => {\n    this.state.friends.find((data, index) => {\n      if (data.id === id) {\n        if (friends[index].count === 0) {\n          friends[index].count = friends[index].count + 1;\n          this.setState({ score: this.state.score + 1 });\n          this.shuffleArray(friends);\n          return true;\n        } else {\n          this.gameScore();\n        }\n      }\n    });\n  }\n\n  shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n\n  gameScore = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score }, function () {\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.friends.forEach(card => {\n      card.count = 0;\n    });\n    this.loseGame();\n    if (this.state.score === 12) {\n      this.setState({ highscore: this.state.score });\n      this.winGame();\n\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} highscore={this.state.highscore} />\n        <Title />\n        <Wrapper>\n          {Card}\n          {friends.map((friend) => {\n            return <Card clickCount={this.clickCount} name={friend.name} image={friend.image} key={friend.id} id={friend.id} />\n          })\n          }\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}